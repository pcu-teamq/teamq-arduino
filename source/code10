#include <virtuabotixRTC.h>
#include <Wire.h>
#include <LiquidCrystal.h>
#include <Adafruit_Fingerprint.h>

#define btnRIGHT  0
#define btnUP     1
#define btnDOWN   2
#define btnLEFT   3
#define btnSELECT 4
#define btnNONE   5

virtuabotixRTC myRTC(6, 7, 8);
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
int lcd_key     = 0;
int adc_key_in  = 0;
int peopleId = 1;

int read_LCD_buttons()
{
  adc_key_in = analogRead(0);
  if (adc_key_in < 50)   return btnRIGHT;
  if (adc_key_in < 250)  return btnUP;
  if (adc_key_in < 450)  return btnDOWN;
  if (adc_key_in < 650)  return btnLEFT;
  if (adc_key_in < 850)  return btnSELECT;
  return btnNONE;
}

#if (defined(__AVR__) || defined(ESP8266)) && !defined(__AVR_ATmega2560__)
// For UNO and others without hardware serial, we must use software serial...
// pin #2 is IN from sensor (GREEN wire)
// pin #3 is OUT from arduino  (WHITE wire)
// Set up the serial port to use softwareserial..
SoftwareSerial mySerial(2, 3);

#else
// On Leonardo/M0/etc, others with hardware serial, use hardware serial!
// #0 is green wire, #1 is white
#define mySerial Serial1

#endif


Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
String nameArr[3] = {"Kim", "Lee", "Cho"};
int logArr[3] = {0, 0, 0};


uint8_t id;

void setup()  {
  lcd.begin(16, 2);
  myRTC.setDS1302Time(00, 11, 16, 5, 21, 10, 2021);
}

void loop()  {
  myRTC.updateTime();
  lcd.setCursor(0, 0);
  switch (myRTC.dayofweek) {
    case 1:
      lcd.print("SUN ");
      break;
    case 2:
      lcd.print("MON ");
      break;
    case 3:
      lcd.print("TUE ");
      break;
    case 4:
      lcd.print("WED ");
      break;
    case 5:
      lcd.print("THU ");
      break;
    case 6:
      lcd.print("FRI ");
      break;
    case 7:
      lcd.print("SAT ");
      break;
  }

  lcd.print(myRTC.month);
  lcd.print("/");
  lcd.print(myRTC.dayofmonth);
  lcd.print(" ");

  lcd.print(myRTC.hours);
  lcd.print(":");
  lcd.print(myRTC.minutes);

  lcd.setCursor(0, 1);
  lcd.print("click the button");

  lcd.setCursor(0, 1);
  lcd_key = read_LCD_buttons();

  switch (lcd_key)
  {
    case btnRIGHT:
      {
        lcd.print("Remove          ");
        break;
      }
    case btnLEFT:
      {
        lcd.print("Enrollment      ");
        Serial.begin(9600);
        while (!Serial);  // For Yun/Leo/Micro/Zero/...
        delay(1000);
        Serial.println("\n\nAdafruit Fingerprint sensor enrollment");
        

        // set the data rate for the sensor serial port
        finger.begin(57600);

        if (finger.verifyPassword()) {
          Serial.println("Found fingerprint sensor!");
        } else {
          Serial.println("Did not find fingerprint sensor :(");
          while (1) {
            delay(1);
          }
        }

        Serial.println(F("Reading sensor parameters"));
        finger.getParameters();
        Serial.print(F("Status: 0x")); Serial.println(finger.status_reg, HEX);
        Serial.print(F("Sys ID: 0x")); Serial.println(finger.system_id, HEX);
        Serial.print(F("Capacity: ")); Serial.println(finger.capacity);
        Serial.print(F("Security level: ")); Serial.println(finger.security_level);
        Serial.print(F("Device address: ")); Serial.println(finger.device_addr, HEX);
        Serial.print(F("Packet len: ")); Serial.println(finger.packet_len);
        Serial.print(F("Baud rate: ")); Serial.println(finger.baud_rate);

        Serial.println("Ready to enroll a fingerprint!");
        Serial.println("Please type in the ID # (from 1 to 127) you want to save this finger as...");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Put your finger ");
        lcd.setCursor(0, 1);
        lcd.print("on");
        id = peopleId++;
        if (id == 0) {// ID #0 not allowed, try again!
          return;
        }
        Serial.print("Enrolling ID #");
        Serial.println(id);

        while (!  getFingerprintEnroll() );
        
        break;
      }
    case btnUP:
      {
        lcd.print("Go to work        ");
        delay(2000);
        //시리얼 통신 시작
        Serial.begin(9600);
        //lcd 통신 시작
        lcd.begin(16, 2);

        //엑셀에 출력될 라벨(타이틀) 출력
        Serial.println("CLEARDATA");
        Serial.println("LABEL, TIME, ID, NAME, LOG");

        while (!Serial);  // For Yun/Leo/Micro/Zero/...
        delay(100);
        //Serial.println("\n\nAdafruit finger detect test");

        // set the data rate for the sensor serial port
        //지문인식 센서 통신 시작
        finger.begin(57600);
        delay(5);
        //지문인식 센서 디바이스 연결 확인
        if (finger.verifyPassword()) {
          //Serial.println("Found fingerprint sensor!");
        } else {
          //Serial.println("Did not find fingerprint sensor :(");
          while (1) {
            delay(1);
          }
        }

        //Serial.println(F("Reading sensor parameters"));
        //지문인식 센서 정보 확인
        finger.getParameters();
        //  Serial.print(F("Status: 0x")); Serial.println(finger.status_reg, HEX);
        //  Serial.print(F("Sys ID: 0x")); Serial.println(finger.system_id, HEX);
        //  Serial.print(F("Capacity: ")); Serial.println(finger.capacity);
        //  Serial.print(F("Security level: ")); Serial.println(finger.security_level);
        //  Serial.print(F("Device address: ")); Serial.println(finger.device_addr, HEX);
        //  Serial.print(F("Packet len: ")); Serial.println(finger.packet_len);
        //  Serial.print(F("Baud rate: ")); Serial.println(finger.baud_rate);

        //등록된 지문 유무 판단
        finger.getTemplateCount();

        if (finger.templateCount == 0) {
          //Serial.print("Sensor doesn't contain any fingerprint data. Please run the 'enroll' example.");
        }
        else {
          //    Serial.println("Waiting for valid finger...");
          //      Serial.print("Sensor contains "); Serial.print(finger.templateCount); Serial.println(" templates");
        }

        getFingerprintID();
        delay(50);            //don't ned to run this at full speed.
        break;
      }
    case btnDOWN:
      {
        lcd.print("Off work  ");
        break;
      }
  }
}

uint8_t readnumber(void) {
  uint8_t num = 0;

  while (num == 0) {
    while (! Serial.available());
    num = Serial.parseInt();
  }
  return num;
}

uint8_t getFingerprintEnroll() {

  int p = -1;
  Serial.print("Waiting for valid finger to enroll as #"); Serial.println(id);
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image taken");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Image taken");
        break;
      case FINGERPRINT_NOFINGER:
        Serial.println(".");
        break;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Error");
        break;
      case FINGERPRINT_IMAGEFAIL:
        Serial.println("Imaging error");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Error");
        break;
      default:
        Serial.println("Unknown error");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Error");
        break;
    }
  }

  // OK success!

  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  Serial.println("Remove finger");
  delay(2000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
  Serial.print("ID "); Serial.println(id);
  p = -1;
  Serial.println("Place same finger again");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Place same fing");
  lcd.setCursor(0, 1);
  lcd.print("er again");
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
      case FINGERPRINT_OK:
        Serial.println("Image taken");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Image taken");
        break;
      case FINGERPRINT_NOFINGER:
        Serial.print(".");
        break;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Error");
        break;
      case FINGERPRINT_IMAGEFAIL:
        Serial.println("Imaging error");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Error");
        break;
      default:
        Serial.println("Unknown error");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Error");
        break;
    }
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK converted!
  Serial.print("Creating model for #");  Serial.println(id);

  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
    Serial.println("Fingerprints did not match");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  Serial.print("ID "); Serial.println(id);
  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) {
    Serial.println("Stored!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  return true;
}

uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  lcd.clear();
  lcd.setCursor(0, 1);
  lcd.print("click the button");
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      //Serial.println("Imaging error");
      return p;
    default:
      //Serial.println("Unknown error");
      return p;
  }

  // OK success!

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      //Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      //Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      //Serial.println("Could not find fingerprint features");
      return p;
    default:
      //Serial.println("Unknown error");
      return p;
  }

  // OK converted!
  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
    //Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    //Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    //Serial.println("Did not find a match");
    return p;
  } else {
    //Serial.println("Unknown error");
    return p;
  }

  // found a match!
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("#");
  lcd.print(finger.fingerID);
  lcd.print(" ");
  lcd.print(nameArr[finger.fingerID - 1]);
  lcd.print(" ");

  Serial.print("DATA, TIME, ");
  Serial.print(finger.fingerID);
  Serial.print(", ");
  Serial.print(nameArr[finger.fingerID - 1]);
  Serial.print(", ");

  if (logArr[finger.fingerID - 1] == 0) {
    logArr[finger.fingerID - 1] = 1;
    Serial.println("Log In");
    lcd.print("Log In");
    lcd.setCursor(0, 1);
    lcd.print("Have a nice day!");
  }
  else {
    logArr[finger.fingerID - 1] = 0;
    Serial.println("Log Out");
    lcd.print("Log Out");
    lcd.setCursor(0, 1);
    lcd.print("See you again!");
  }
  delay(2000);
  //  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  //  Serial.print(" with confidence of "); Serial.println(finger.confidence);

  return finger.fingerID;
}

// returns -1 if failed, otherwise returns ID #
// 지문 인식 실패시 -1 반환, 다른 경우라면 ID 리턴
//int getFingerprintIDez() {
//  uint8_t p = finger.getImage();
//  if (p != FINGERPRINT_OK)  return -1;
//
//  p = finger.image2Tz();
//  if (p != FINGERPRINT_OK)  return -1;
//
//  p = finger.fingerFastSearch();
//  if (p != FINGERPRINT_OK)  return -1;
//
//  // found a match!
//  Serial.print("Found ID #"); Serial.print(finger.fingerID);
//  Serial.print(" with confidence of "); Serial.println(finger.confidence);
//  return finger.fingerID;
//}
